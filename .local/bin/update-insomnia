#!/usr/bin/env bash

set -o errexit # Exit when a command fails
# Use || true if a command is allowed to fail
set -o nounset  # Treat unset variables as an error
set -o pipefail # Exit when a command in a pipeline fails

function fetch_latest_version() {
	local releases_url="https://api.github.com/repos/Kong/insomnia/releases?per_page=2"

	local latest_version
	latest_version=$(curl -s -H "Accept: application/vnd.github.v3+json" "$releases_url" | jq -r '.[] | select(.prerelease = "false") | select(.name | startswith("Insomnia")) | .tag_name')

	echo "${latest_version#core@}"
}

function compare_version() {
	local state_folder=$HOME/.local/state/insomnia/
	[ ! -d "$state_folder" ] && mkdir -p "$state_folder"

	local version_file=$state_folder/version.txt
	local version=$1

	if [[ ! -f "$version_file" ]]; then
		touch "$version_file"
		echo "$version" >"$version_file"
		echo 'UPSERT'
	else
		grep "$version" "$version_file" && echo 'NO-DOING' || echo 'UPSERT'
	fi
}

function install() {
	local version=$1
	local dl_dir="$HOME/downloads"

	curl --location \
		--remote-header-name \
		--remote-name \
		--output-dir "$dl_dir" \
		"https://github.com/Kong/insomnia/releases/download/core%40${version}/Insomnia.Core-${version}.tar.gz"

	tar -xzf "${dl_dir}/Insomnia.Core-${version}.tar.gz" -C "${dl_dir}"
	rsync -auv "${dl_dir}/Insomnia.Core-${version}/" "$HOME/.local/share/insomnia/"
}

function run() {
	local version
	version=$(fetch_latest_version)
	[[ $(compare_version "$version") == "UPSERT" ]] && install "$version" || echo "Insomnia is up-to-date"
}

# ----- SCRIPT LOGIC -----
run
